name: Clean up old releases

inputs:
  RELEASES_TO_KEEP:
    type: string
    description: 'Number of releases to keep. Minimal number is 1.'
    default: 10
  SERVER_SSH_KEY:
    type: string
    description: 'Server SSH key'
    required: true
  SERVER_USER:
    description: 'Server used for deployment'
    required: true
  SERVER_HOST:
    description: 'Server host for deployment'
    required: true
  SERVER_ROOT:
    description: 'Server root directory for deployment'
    required: true
  SERVER_PORT:
    description: 'Server port for deployment'
    required: true
  RELEASES_FOLDER:
    type: string
    description: 'Releases folder name'
    default: 'releases'
  SSM_DEPLOY:
    type: boolean
    description: 'Use AWS SSM tunnel for deployment'
    default: false
  AWS_REGION:
    type: string
    description: 'AWS region for SSM tunnel'
    required: false
  AWS_ROLE:
    type: string
    description: 'AWS role for SSM tunnel'
    required: false


runs:
  using: composite
  steps:
    - name: Configure AWS Credentials
      if: ${{ inputs.SSM_DEPLOY }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.AWS_ROLE }}
        aws-region: ${{ inputs.AWS_REGION }}

    # Setup SSH configuration so deploy action connects to the instance over SSM proxy
    - name: Setup ssh config for SSM
      if: ${{ inputs.SSM_DEPLOY }}
      shell: bash
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "# SSH over Session Manager" >> ~/.ssh/config
        echo "host i-* mi-*" >> ~/.ssh/config
        echo "    StrictHostKeyChecking no" >> ~/.ssh/config
        echo "    ProxyCommand sh -c \"aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'\"" >> ~/.ssh/config
  
    - name: Add server SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ inputs.SERVER_SSH_KEY }}

    - name: Cleanup releases
      shell: bash
      run: |
        ssh -p ${{ inputs.SERVER_PORT }} -o StrictHostKeyChecking=no ${{ inputs.SERVER_USER }}@${{ inputs.SERVER_HOST }} "cd ${{ inputs.SERVER_ROOT }} && bash -s ${{ inputs.RELEASES_TO_KEEP }} ${{ inputs.RELEASES_FOLDER }}" <<'EOF'
          parentDirectory="$2"
          index="$1"

          # Ensure the directory exists.
          if [[ ! -d "$parentDirectory" ]]; then
            echo "Error: '$parentDirectory' directory does not exist."
            exit 1
          fi

          # Ensure index is a positive integer.
          if ! [[ "$index" =~ ^[0-9]+$ ]]; then
            echo "Error: Releases number you want to skip must be a positive number."
            exit 1
          fi

          # Get all subdirectories in the parent directory.
          subdirectories=($(ls -lt "$parentDirectory" | grep '^d' | awk '{print $9}' | sort -r))

          # Bailout if parent directory is empty.
          if ((${#subdirectories[@]} == 0)); then
            echo "Error: '$parentDirectory' directory is empty."
            exit 1
          fi

          # Check if the index is within the range of available subdirectories
          if (( index < 1 )); then
            echo "Error: Releases number must be 1 or higher."
            exit 1
          fi

          # Add counter.
          counter=0

          if ((${#subdirectories[@]} == index)); then
            echo "Error: Releases ."
            exit 1
          fi

          echo 'Removed releases:'

          # Loop all subdirectories and remove unnecessary ones.
          for dir in "${subdirectories[@]}"; do	
            if ((counter < $index)); then
                ((counter++))
                continue
            fi

            echo "- $dir"
            rm -rf ${parentDirectory}/${dir}
            ((counter++))
          done

        EOF